// A basic database library for Sh3ll

    DB = {}

    // connect 
    DB.connect = function(dbName="DB", dbPassword="admin", dbTables=["table"], dbPath = "")
        self.name = dbName
        self.password = dbPassword
        self.dbTables = dbTables
        if dbPath == "" then dbPath = current_path
        self.path = dbPath + "/" + self.name + ".db"
        self.path = self.path.replace("//", "/")
        self.folder = self.path.split("/")[0:-1].join("/")
        self.tables = {}
        self.read()
        return self
    end function
    
    // insert
    DB.insert = function(table, data)
        if self.tables.indexes.indexOf(table) == null then return false //print("Table " + table + " not found")
        self.tables[table].push(data)
        return self
    end function
    
    // fetch
    DB.fetch = function(table="")
        if self.tables.indexes.indexOf(table) == null then return null //print("Table " + table + " not found")
        return self.tables[table]
        return self
    end function
    
    // fetchOne
    DB.fetchOne = function(table = "", id = 0)
        if self.tables.indexes.indexOf(table) == null then return false //print("Table " + table + " not found")
        if not self.tables[table].hasIndex(id-1) then return false //print("ID not found in table " + table)
        return self.tables[table][id-1]
        return self
    end function
    
    // fetchBy
    DB.fetchBy = function(table = "", key = "", value = "")
        if self.tables.indexes.indexOf(table) == null then return false //print("Table " + table + " not found")
        newArray = []
        for v in self.tables[table]
            if v.hasIndex(key) and v[key] == value then newArray.push(v)
        end for
        return newArray
        return self
    end function
    
    // update
    DB.update = function(table="", id=0, data=null)
        if self.tables.indexes.indexOf(table) == null then return false //print("Table " + table + " not found")
        if not self.tables[table].hasIndex(id) then return false //print("ID not found in table " + table)
        if not data or typeof(data) != "map" then return null //print("data must be a map")
        self.tables[table][id-1] = data
        return self
    end function
    
    // delete
    DB.delete = function(table="", id=0)
        if self.tables.indexes.indexOf(table) == null then return false //print("Table " + table + " not found")
        if not self.tables[table].hasIndex(id-1) then return false //print("ID not found in table " + table)
        newArray = []
        for k in self.tables[table].indexes
            if k == id-1 then continue
            newArray.push(self.tables[table][k])
        end for
        self.tables[table] = newArray
        return self
    end function
    
    // read
    DB.read = function()
        for s in self.dbTables
            self.tables[s] = []
        end for
        self.binaryDbFile = get_shell.host_computer.File(self.path)
        if not self.binaryDbFile then return
        get_shell.launch(self.path, self.password)
        if get_custom_object.hasIndex("DB") and get_custom_object.DB.hasIndex(self.name) then self.tables = get_custom_object.DB[self.name]
        return self
    end function
    
    // write
    DB.write = function()
        randomName = md5(rnd() + current_date)[0:6]
        randomSrc = randomName + ".tmp"
        randomFullPath = self.folder + "/" + randomSrc
        get_shell.host_computer.touch(self.folder, randomSrc)
        randomFile = get_shell.host_computer.File(randomFullPath)
        randomFile.chmod("o-rwx")
        randomFile.chmod("g-rwx")
        randomFile.chmod("g+r")
        dbBinaryContent = []
        dbBinaryContent.push("if params.len == 0 then exit(""\nThis is a binary database generated by DB Library\nInfo: <color=yellow>https://github.com/tuonux/gh-bindb\n"")")
        hashPass = md5(self.password)
        dbBinaryContent.push("if md5(params[0]) != (""" + hashPass + """) then exit(""Permission denied"")")
        dbBinaryContent.push("if not get_custom_object.hasIndex(""DB"") then")
        dbBinaryContent.push("  get_custom_object[""DB""] = {}")
        dbBinaryContent.push("end if")
        dbBinaryContent.push("get_custom_object[""DB""]["""+self.name+"""] = {}")
        for table in self.tables
            dbBinaryContent.push("get_custom_object[""DB""]["""+self.name+"""]["""+table.key+"""] = []")
            for row in table.value
                dbBinaryContent.push("get_custom_object[""DB""]["""+self.name+"""]["""+table.key+"""].push("+@row+")")
            end for
        end for
        randomFile.set_content(dbBinaryContent.join(char(10)))
        x = get_shell.build(randomFullPath, self.folder, false)
        self.binaryDbFile = get_shell.host_computer.File(self.path)
        if self.binaryDbFile then self.binaryDbFile.delete
        get_shell.host_computer.File(self.folder + "/" + randomName).rename(self.name + ".db")
        randomFile.delete
        self.read()
        return self
    end function
    
    // wipe
    DB.wipe = function()
        self.binaryDbFile = get_shell.host_computer.File(self.path)
        if self.binaryDbFile then self.binaryDbFile.delete
        return self.read()
    end function
    
    // printTable
    DB.printTable = function(table="", labels = {})
        if self.tables.indexes.indexOf(table) == null then return print("Table " + table + " not found")
        if self.tables[table].len == 0 then return false
        out = []
        columns = ["#"]
        for k in self.tables[table][0].indexes
            label = str(k)
            if labels.hasIndex(k) then label = labels[k]
            columns.push(label.replace(" ", char(160)))
        end for
        out.push(columns.join(" "))
        i = 0
        for s in self.tables[table]
            i = i + 1
            row = [str(i)]
            for k in s.values
                row.push(str(k).replace(" ", char(160)))
            end for
            out.push(row.join(" "))
        end for
        print(format_columns(out.join("\n")))
        return self
    end function