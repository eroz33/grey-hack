// Sh3ll by eroz33

import_code("/lib/commands.src")
import_code("/lib/libs.src")

// Global values
globals.name = "sh3ll"
globals.coder = "eroz33"
globals.version = "0.2"
globals.running = true

// Database
globals.db = {}
globals.db.name = "db"
globals.db.folder = null
globals.db.exploitFilesCount = 0
globals.db.passwordFilesCount = 0
globals.db.names = ["passwords", "exploits"]

// Local variables for active user and active object.
current = {}
current.user = active_user
current.object = get_shell
current.computer = get_shell.host_computer
current.folder = get_shell.host_computer.File(current_path)
current.router = get_router
current.publicip = get_router.public_ip
current.localip = current.computer.local_ip

// Set the crypto library.
crypto = include_lib("/lib/crypto.so")
if not crypto then crypto = include_lib(parent_path(program_path) + "/crypto.so")
if not crypto then
    print(globals.name + ": Cannot find 'crypto.so' library on system.")
    return false
end if


// ----------------- Main Program --------------------
if params.len != 0 then exit("Usage: " + program_path.split("/")[-1])

// Execute given command with arguments.
Run = function(argv = [])
    if typeof(argv) != "list" then return print(globals.name + ": Invalid type, needs to be of type 'string'.")

    // Load commands.
    // TODO: Change sorting of commands to be in line with needed permissions.
    commands = globals.commands
    commands = commands + globals.commandsDB
    if typeof(current.object) == "shell" or typeof(current.object) == "computer" then
        commands = commands + globals.commandsComputer
        if typeof(current.object) == "shell" then
            commands = commands + globals.commandsShell
        end if
    end if

    if not commands.hasIndex(argv[0].lower.trim) then return print(globals.name + ": Command not found!")
    command = commands[argv[0].lower.trim]
    if argv.len > 1 then
        if argv[1] == "-h" or argv[1] == "--help" then
            map = current.computer.File("/root/Config/Map.conf")
            print(map)
            print(map.get_content)
            return print("Usage: " + command.name + " " + command.args)
        end if
    end if

    return command.run(argv)
end function

clear_screen
splash()
while globals.running
        if current.user == "root" then
            input = user_input("<color=#1070afff>" + current.user + "</color><color=white>@</color>" + current.publicip + "<color=yellow>[</color>" + current.folder.path + "<color=yellow>]</color><color=green>></color>:")
        else
            input = user_input("<color=#1070afff>" + current.user + "</color><color=white>@</color>" + current.publicip + "<color=yellow>[</color>" + current.folder.path + "<color=yellow>]</color><color=red>></color>:")
        end if
    if input == "" then continue
    Run(input.trim.split(" "))
end while