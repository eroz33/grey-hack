// useful functions for Sh3ll

libs = {}

libs["toFile"] = function(anyObject = null)
    if typeof(anyObject) == "shell" then return anyObject.host_computer.File("/")
    if typeof(anyObject) == "computer" then return anyObject.File("/")
    if typeof(anyObject) == "file" then
        while anyObject.path != "/"
            anyObject = anyObject.parent
        end while
        return anyObject
    end if
    return null
end function

libs["navTo"] = function(anyObject, path = "/")
    if typeof(anyObject) != "file" and typeof(anyObject) != "computer" and typeof(anyObject) != "shell" then
        return null
    end if
    if typeof(path) != "string" then return null
    if path.len == 0 then return null
    
    object = libs.toFile(anyObject)
    if not object then return null

    // Trim trailing '/' character(s) from path.
    while (path.len > 1) and (path[-1] == "/")
        path = path[:-1]
    end while

    // Trim starting '/' character(s) from path.
    while (path.len > 1) and (path[0] == "/")
        path = path[1:]
    end while

    if path == "/" then return object
    path = path.split("/")
    for i in path.indexes
        found = false
        if i == (path.len - 1) then
            for file in object.get_folders + object.get_files
                if file.name != path[i] then continue
                return file
            end for
            return null
        end if

        for file in object.get_folders
            if file.name != path[i] then continue
            found = true
            object = file
            break
        end for
        if not found then return null
    end for

    return object
end function

libs["encrypt"] = function(string = "", secret = "")
    if typeof(string) != "string" then return null
	safe = ""
    for l in string
		safe = safe + bitwise("^",l,secret)
	end for
    return safe
end function

libs["decrypt"] = function(string = "", secret = "")
    if typeof(string) != "string" then return null
    safe = ""
    for l in string
		safe = safe + bitwise("^",l,secret)
	end for
    return safe
end function

libs["getRandomIP"] = function()
    parts = []
    maxTries = 100
    while maxTries > 0
        parts.push(ceil(rnd * 223))
        parts.push(floor(rnd * 223))
        parts.push(floor(rnd * 223))
        parts.push(floor(rnd * 223))
        ip = parts.join(".")
        if not is_lan_ip(ip) and is_valid_ip(ip) then return ip
        maxTries = maxTries - 1
    end while
    return null
end function