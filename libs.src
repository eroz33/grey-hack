// useful functions for Sh3ll

libs = {}
import_code("/lib/sh3ll/dblib")
    
// ------------------ General Functions -------------------
    
libs["getRandomIP"] = function()
    parts = []
    maxTries = 100
    while maxTries > 0
        parts.push(ceil(rnd * 223))
        parts.push(floor(rnd * 223))
        parts.push(floor(rnd * 223))
        parts.push(floor(rnd * 223))
        ip = parts.join(".")
        if not is_lan_ip(ip) and is_valid_ip(ip) then return ip
        maxTries = maxTries - 1
    end while
    return null
end function
    
libs["checkDB"] = function(flag = null)
    if current.computer.File(globals.DBlocation + "/" + globals.name + ".db") then
        if globals.db == {} and flag == null then
            secret = user_input("Enter database secret: ", true)
            globals.db = DB.connect(globals.name, secret, globals.DBtables, globals.DBlocation)
            if libs.checkDB then return true
            return false
        end if
        return true
    end if
    return false
end function
    
// ------------------ File Functions -------------------
    
libs["toFile"] = function(anyObject = null)
    if typeof(anyObject) == "shell" then return anyObject.host_computer.File("/")
    if typeof(anyObject) == "computer" then return anyObject.File("/")
    if typeof(anyObject) == "file" then
        while anyObject.path != "/"
            anyObject = anyObject.parent
        end while
        return anyObject
    end if
    return null
end function
    
libs["navTo"] = function(anyObject, path = "/")
    if typeof(anyObject) != "file" and typeof(anyObject) != "computer" and typeof(anyObject) != "shell" then return null
    if typeof(path) != "string" then return null
    if path.len == 0 then return null
        
    object = libs.toFile(anyObject)
    if not object then return null
    
    // Trim trailing '/' character(s) from path.
    while (path.len > 1) and (path[-1] == "/")
        path = path[:-1]
    end while
    
    // Trim starting '/' character(s) from path.
    while (path.len > 1) and (path[0] == "/")
        path = path[1:]
    end while
    
    if path == "/" then return object
    path = path.split("/")
    for i in path.indexes
        found = false
        if i == (path.len - 1) then
            for file in object.get_folders + object.get_files
                if file.name != path[i] then continue
                return file
            end for
            return null
        end if
    
        for file in object.get_folders
            if file.name != path[i] then continue
            found = true
            object = file
            break
        end for
        if not found then return null
    end for
    
    return object
end function
    
// ------------------ Network Functions -------------------
    
libs["getPorts"] = function(ip)
    ret = {}
    ret.targetIP = null
    ret.router = null
    ret.ports = null
    
    targetIP = ip
    if not is_valid_ip(targetIP) then targetIP = nslookup(targetIP)
    if not is_valid_ip(targetIP) then return null
    
    if is_lan_ip(targetIP) then
        ret.router = get_router
    else
        ret.router = get_router(targetIP)
    end if
    if not ret.router then return null

    if not is_lan_ip(targetIP) then
        ret.ports = ret.router.used_ports
    else
        ret.ports = ret.router.device_ports(targetIP)
    end if
    if typeof(ret.ports) == "string" then return null
    
    ret.targetIP = targetIP
    return ret
end function
    
libs["scanPort"] = function(metaxploit, targetIP, targetPort)
    if typeof(metaxploit) != "MetaxploitLib" then return null
    if not is_valid_ip(targetIP) then return null
    if typeof(targetPort) != "number" then return null
    
    netsession = metaxploit.net_use(targetIP, targetPort)
    if not netsession then
        print("<color=red>" +globals.name+ "</color>" + ": Cannot get netsession.")
        return null
    end if
    
    metalib = netsession.dump_lib
    if not metalib then
        print("<color=red>" +globals.name+ "</color>" + ": Cannot dump lib.")
        return null
    end if
    
    return libs.scanLib(metalib, metaxploit)
end function
    
libs["scanLib"] = function(metalib, metax)
    if not metalib then return null
    if not metax then return null

    if globals.db.fetch("exploits").len > 0 then
        ret = libs.dbQueryExploits(metalib.lib_name, metalib.version)
        if ret != null then return ret
    end if
    
    
    ret = {}
    ret.name = metalib.lib_name
    ret.version = metalib.version
    ret.memorys = {}
    memorys = metax.scan(metalib)
    for memory in memorys
        data = metax.scan_address(metalib, memory).split("Unsafe check: ")
        if not data then continue
        ret.memorys[memory] = []
        for line in data
            if line == data[0] then continue
            if line == "" then continue
            value = line[line.indexOf("<b>")+3:line.indexOf("</b>")].replace(char(10), "")
            ret.memorys[memory].push(value)
        end for
    end for

    if libs.checkDB and not libs.checkInDB("exploits", ret.name, ret.version) then
        //print("writing to database")
        if libs.dbWriteExploits(ret) then
            print("<color=yellow>Library '" + ret.name + "' version " + ret.version + " added.</color>")
        else
            print("<color=orange>Library '" + ret.name + "' version " + ret.version + " already exists.</color>")
        end if
    end if
    
    return ret
end function
    
// ------------------ Sh3ll Functions -------------------

// ------------------ Database Functions ------------------

libs["checkInDB"] = function(table, name, version)
    if libs.checkDB(false) and globals.db.fetch(table).len == 0 then return false

    exp = globals.db.fetchBy(table, "name", name)
    for entry in exp
        if entry.version == version then
            return true
        end if
    end for

    return false
end function

libs["dbQueryExploits"] = function(libname = "", libver = "")
    if libs.checkDB(false) and globals.db.fetch("exploits").len == 0 then return null

    // Look into why this is here
    if libname == "" then
        retrieved = []
        for entry in globals.db.fetch("exploits")
            print(entry)
        end for
    else 
        exp = globals.db.fetchBy("exploits", "name", libname)
        for entry in exp
            if entry.version == libver then
                return entry.memorys
            end if
        end for
    end if
    return null
end function

libs["dbWriteExploits"] = function(result = null)
    if typeof(result) != "map" then return null

    //print(result)
    name = result.name
    ver = result.version
    mem = result.memorys
    globals.db.insert("exploits", { "name": name, "version": ver, "memorys": mem })
    globals.db.write()
    return true
end function