// Commands library for Sh3ll

import_code("/lib/libs.src")


// ------------------ Special Functions ------------------
splash = function()
    splash =         "<color=green>___________                    ________ ________   </color>" + char(10)
    splash = splash + "<color=green>\_   _____/______  ____________\_____  \\_____  \  </color>" + char(10)
    splash = splash + "<color=green> |    __)_\_  __ \/  _ \___   /  _(__  <  _(__  <  </color>" + char(10)
    splash = splash + "<color=green> |        \|  | \(  <_> )    /  /       \/       \ </color>" + char(10)
    splash = splash + "<color=green>/_______  /|__|   \____/_____ \/______  /______  / </color>" + char(10)
    splash = splash + "<color=green>        \/                   \/       \/       \/  </color>" + char(10)
    splash = splash + "                Version: " + globals.version + char(10)
    splash = splash + "                 Coder: " + globals.coder + char(10)
    print(splash)
end function


// ------------------- Shell Commands --------------------

globals.commandsShell = {}

// ----------------- Computer Commands -------------------

globals.commandsComputer = {}

globals.commandsComputer["ifconfig"] = { "name": "ifconfig", "desc": "Display IP information.", "args": "" }
globals.commandsComputer["ifconfig"]["run"] = function(argv = [])
    if typeof(argv) != "list" then return print(globals.name + ": Invalid argument vector given.")
    if argv.len != 1 then return print(globals.name + ": Takes no arguments.")

    if current.computer != null and not current.computer.is_network_active then
        print(globals.name + ":<color=red>Error</color>: No network connection.")
        return false
    end if

    info = ""
    if current.computer.active_net_card == "WIFI" then
        print("Connected to WIFI network.")
        print("----------------------------");
        info = info + "ESSID: " + current.router.essid_name + char(10)
        info = info + "BSSID: " + current.router.bssid_name + char(10)
    else 
        print("Connected to LAN network.")
        print("----------------------------");
    end if
    info = info + "Public_IP: " + current.publicip + char(10)
    info = info + "Local_IP: " + current.localip + char(10)
    if current.computer != null then
        info = info + "Gateway: " + current.computer.network_gateway + char(10)
    else
        info = info + "Gateway: 0.0.0.0" + char(10)
    end if
    print(format_columns(info))
    return true
end function

globals.commandsComputer["ls"] = { "name": "ls", "desc": "List the current directory or given directory.", "args": "[(opt) path] [(opt) -l]" }
globals.commandsComputer["ls"]["run"] = function(argv = [])
    if typeof(argv) != "list" then
        return print(globals.name + ": Invalid argument vector given.")
    end if

    long_format = false
    show_all = false
    have_path = null
    folder = null

    // Evaluate based on argv.len; argv[0] is the command name.
    if argv.len == 1 then
        folder = current.folder
    else if argv.len == 2 then
        if argv[1].indexOf("-") == 0 then
            // It's a flag; validate allowed flags.
            if argv[1] == "-l" then
                long_format = true
            else if argv[1] == "-a" then
                show_all = true
            else if argv[1] == "-la" or argv[1] == "-al" then
                long_format = true
                show_all = true
            else
                print(globals.name + ": <color=red>Error</color>: Invalid flag provided.")
                return false
            end if
            folder = current.folder
        else if argv[1].indexOf("/") != "Number" then
            print(globals.name + ": <color=red>Error</color>: Invalid flag provided.")
            return false
        else
            // Treat it as a path.
            have_path = argv[1]
        end if
    else if argv.len == 3 then
        // The two extra arguments must be: <path> and a flag as the last argument.
        if argv[2].indexOf("-") != 0 then
            print(globals.name + ": <color=red>Error</color>: Invalid flag provided.")
            return false
        end if
        // Validate flag.
        if argv[2] == "-l" then
            long_format = true
        else if argv[2] == "-a" then
            show_all = true
        else if argv[2] == "-la" or argv[2] == "-al" then
            long_format = true
            show_all = true
        else
            print(globals.name + ": <color=red>Error</color>: Invalid flag provided.")
            return false
        end if
        have_path = argv[1]
    else
        print(globals.name + ": Too many arguments.")
        return false
    end if

    // Resolve folder from have_path if provided, otherwise default to current.folder.
    if have_path != null then
        if have_path.indexOf("/") == 0 then
            folder = libs.navTo(current.object, have_path)
        else
            folder = libs.navTo(current.object, current.folder.path + "/" + have_path)
        end if
    end if

    if folder == null then
        folder = current.folder
    end if

    if folder == null then
        print(globals.name + ": Path not found.")
        return false
    end if

    // Build header based on long_format flag.
    if long_format then
        info = char(10) + "PERMISSIONS  OWNER  GROUP  SIZE  NAME"
    else
        info = null
    end if

    // Append each file/folder entry.
    for file in folder.get_folders + folder.get_files
        // Skip hidden files unless show_all is true.
        if show_all or file.name.indexOf(".") != 0 then
            if long_format then
                info = info + char(10) + file.permissions + "  " + file.owner + "  " + file.group + "  " + file.size + "  " + file.name
            else
                info = info + char(10) + file.name
            end if
        end if
    end for

    if info.len > 0 then
        print(format_columns(info[1:]))
    else
        print(globals.name + ": No files found.")
    end if

    return true
end function

globals.commandsComputer["cd"] = { "name": "cd", "desc": "Change to a different directory.", "args": "[(opt) path]" }
globals.commandsComputer["cd"]["run"] = function(argv = [])
    if typeof(argv) != "list" then return print(globals.name + ": Invalid argument vector given.")

    if argv.len == 1 then
        file = null
        if current.user == "root" then
            file = libs.navTo(current.object, "/root")
        else
            file = libs.navTo(current.object, "/home/" + current.user)
        end if
        if not file then
            print(globals.name + ": Not found.")
            return false
        end if
        current.folder = file
        return
    else if argv.len == 2 then
        if argv[1] == ".." then
            if current.folder.path != "/" then
                current.folder = current.folder.parent
            else
                print(globals.name + ": Already at root directory.")
            end if
        else
            file = null
            if argv[1].indexOf("/") == 0 then
                file = libs.navTo(current.object, argv[1])
            else
                file = libs.navTo(current.object, current.folder.path + "/" + argv[1])
            end if
            if not file then
                print(globals.name + ": Not found.")
                return false
            end if
            current.folder = file
        end if
    else
        return print(globals.name + ":<color=red>Error</color>: Invalid number of arguments.")
    end if
    return true
end function

globals.commandsComputer["ps"] = { "name": "ps", "desc": "Display process information.", "args": "" }
globals.commandsComputer["ps"]["run"] = function(argv = [])
    if typeof(argv) != "list" then return print(globals.name + ": Invalid argument vector given.")
    if argv.len != 1 then return print(globals.name + ": Takes no arguments.")

    info = "USER  PID  COMMAND"
    procs = current.computer.show_procs
    for proc in procs.split(char(10))[1:]
        usr = proc.split(" ")[0]
        pid = proc.split(" ")[1]
        cmd = proc.split(" ")[4]
        info = info + char(10) + usr + "  " + pid + "  " + cmd
    end for
    print(format_columns(info))
    return true
end function

globals.commandsComputer["clear"] = { "name": "clear", "desc": "Clear the terminal screen.", "args": "" }
globals.commandsComputer["clear"]["run"] = function(argv = [])
    if typeof(argv) != "list" then return print(globals.name + ": Invalid argument vector given.")
    if argv.len > 1 then return print(globals.name + ": Takes no arguments.")
    clear_screen
    splash()
    return null
end function


// ------------------ General Commands -------------------

globals.commands = {}

globals.commands["random"] = { "name": "random", "desc": "Get a random IP to hack.", "args": "" }
globals.commands["random"]["run"] = function(argv = [])
    if typeof(argv) != "list" then return print(globals.name + ": Invalid argument vector given.")
    if argv.len != 1 then return print(globals.name + ": Takes NO arguments.")

    randomIP = libs.getRandomIP
    if not randomIP then
        print("Cannot get random IP.")
        return false
    end if
    print("Random global IP: " + randomIP)
    return true
end function

globals.commands["help"] = { "name": "help", "desc": "Display a list of commands.", "args": "" }
globals.commands["help"]["run"] = function(argv = [])
    if typeof(argv) != "list" then return print(globals.name + ": Invalid argument vector given.")
    if argv.len != 1 then return print(globals.name + ": Does NOT take any arguments.")

    info =  char(9) + "<color=yellow>=== General Commands ===</color>\n"
    for command in globals.commands
        if command.value.name.len < 6 then
            info = info + char(9) + command.value.name + "  " + char(9) + char(9) + command.value.desc + "\n"
        else
            info = info + char(9) + command.value.name + "  " + char(9) + command.value.desc + "\n"
        end if
    end for

    if typeof(current.object) == "shell" or typeof(current.object) == "computer" then
        info =  info + char(9) + "<color=yellow>=== Computer Commands ===</color>\n"
        for command in globals.commandsComputer
            if command.value.name.len < 6 then
                info = info + char(9) + command.value.name + "  " + char(9) + char(9) + command.value.desc + "\n"
            else
                info = info + char(9) + command.value.name + "  " + char(9) + command.value.desc + "\n"
            end if
        end for
        if typeof(current.object) == "shell" then
            info =  info + char(9) + "<color=yellow>=== Shell Commands ===</color>\n"
            for command in globals.commandsShell
                if command.value.name.len < 6 then
                    info = info + char(9) + command.value.name + "  " + char(9) + char(9) + command.value.desc + "\n"
                else
                    info = info + char(9) + command.value.name + "  " + char(9) + command.value.desc + "\n"
                end if
            end for
        end if
    end if

    print(info)
    return true
end function

globals.commands["exit"] = { "name": "exit", "desc": "Exit this shell.", "args": "" }
globals.commands["exit"]["run"] = function(argv = [])
    if typeof(argv) != "list" then return print(globals.name + ": Invalid argument vector given.")
    if argv.len > 1 then return print(globals.name + ": Takes NO arguments.")
    print(globals.name + ": <b><color=yellow>Exiting...</color></b>")
    globals.running = false
    return true
end function